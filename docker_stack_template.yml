version: '3.7'

services:

 
  checker:
    image: koo5/checker:latest
    networks:
      - default
    deploy:
      replicas: 1
      restart_policy:
        condition: any

 
#  echo:
#    image: koo5/echo:latest
#    networks:
#      - default
#    deploy:
#      replicas: 1
#      restart_policy:
#        condition: any

 
  alertmanager:
    image: koo5/alertmanager:latest
    volumes:
      - "alertmanager_storage:/alertmanager"
      - "alertmanager_etc:/etc/alertmanager"
    networks:
      - default
    ports:
      - "9093:9093"
    deploy:
      replicas: 1
      restart_policy:
        condition: any


  karma:
    image: koo5/karma:latest
    volumes:
      - "./karma/karma.yaml:/karma.yaml"
    environment:
      ALERTMANAGER_URI: "http://alertmanager:9093"
    networks:
      - default
    ports:
      - "9094:8080"
    deploy:
      replicas: 1
      restart_policy:
        condition: any
    depends_on:
      - alertmanager

 
  demonitor:
    image: koo5/demonitor:latest
    volumes:
      - "./demonitor/config.aml:/usr/src/app/demonitor/config.aml"
      - "orbitdb:/usr/src/app/orbitdb"
    environment:
      ALERTMANAGER_URL: "http://alertmanager:9093"
#      DEBUG: "*"
    networks:
      - default
    ports:
      - "3223:3223"
#      - "4002:4002"
#      - "4003:4003"
    deploy:
      replicas: 1
      restart_policy:
        condition: any
    depends_on:
      - karma
      - ipfs


  solomonitor:
    image: koo5/solomonitor:latest
    volumes:
      - "./demonitor/config.aml:/usr/src/app/demonitor/config.aml"
    environment:
      ALERTMANAGER_URL: "http://alertmanager:9093"
#      DEBUG: "*"
    networks:
      - default
    ports:
      - "3223:3223"
    deploy:
      replicas: 1
      restart_policy:
        condition: any
    depends_on:
      - karma


  ipfs:
    image: ipfs/go-ipfs:latest
    volumes:
      - ipfs_data:/data/ipfs
    networks:
      - default
    ports:
      - "4001:4001"
      - "5001:5001"
    command: daemon --migrate=true --enable-pubsub-experiment
    #secrets:
    #  - IPFS_SWARM_KEY #see: https://docs.ipfs.tech/how-to/run-ipfs-inside-docker/#private-swarms-inside-docker
    #environment:
    #  IPFS_SWARM_KEY_FILE: /run/secrets/IPFS_SWARM_KEY


networks:
  default:


volumes:
  orbitdb:
  ipfs_staging:
  ipfs_data:
  alertmanager_storage:
  alertmanager_etc:


secrets:
  CHECKER_SECRETS:
    file: secrets/CHECKER_SECRETS
#  IPFS_SWARM_KEY:
#    file: secrets/swarm.key
